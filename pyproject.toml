[tool.poetry]
name = "bendr"
version = "0.1.0"
description = ""
authors = ["kezure <3447723+kezure@users.noreply.github.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.11"
torch = "^2.2.1"
mne = "^1.6.1"
pyyaml = "^6.0.1"
numpy = "^1.26.4"
tqdm = "^4.66.2"
bs4 = "^0.0.2"
mlflow = "^2.11.1"
hydra-core = "^1.3.2"
omegaconf = "^2.3.0"
pynvml = "^11.5.0"
boto3 = "^1.34.64"
openpyxl = "^3.1.2"
matplotlib = "^3.8.3"
psutil = "^5.9.8"
torchvision = "^0.17.1"
torchmetrics = "^1.3.1"
torchinfo = "^1.8.0"
optuna = "^3.5.0"
tensorboard = "^2.16.2"
lightning = "^2.2.1"
scikit-learn = "^1.4.1.post1"
moabb = {version = "^1.0.0", python = ">=3.11,<3.12"}
python-dotenv = "^1.0.1"

[tool.poetry.dev-dependencies]
pre-commit = "^3.6.0"
mypy = "^1.8.0"
ruff = "^0.1.14"
pytest = "^7.4.4"
pytest-xdist = "^3.5.0"
pytest-cov = "^4.1.0"
python-dotenv = "^1.0.0"
tbvaccine = "^0.3.1"
sphinx = "^7.2.6"
sphinx-autodoc-typehints = "^1.25.2"
sphinx-rtd-theme = "^2.0.0"
sphinx-pyproject = "^0.3.0"


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
pythonpaths = ["bendr"]
testpaths = ["tests"]
addopts = [
    "-s",
    "--durations=0",
    # "-vv",
]

[tool.coverage.run]
omit = [
    "/tmp/*",
    "tests/conftest.py"
]
concurrency = ["multiprocessing"]
parallel = "true"

[tool.sphinx-pyproject]
project = "bendr"
copyright = "2023, 3447723+kezure@users.noreply.github.com"
language = "ja"
package_root = "bendr"
html_theme = "sphinx_rtd_theme"
todo_include_todos = true
templates_path = ["_templates"]
html_static_path = ["_static"]
exclude_patterns = ["_build", "Thumbs.db", ".DS_Store", "tests"]
extensions = [
    "sphinx.ext.autodoc",
    "sphinx_autodoc_typehints",
    "sphinx.ext.autosummary",
    "sphinx.ext.napoleon",
    "sphinx.ext.viewcode",
    "sphinx.ext.intersphinx",
    "sphinx.ext.todo",
    "sphinx.ext.githubpages",
]


[tool.ruff]
target-version = "py311"
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Same as Black.
line-length = 88
indent-width = 4

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "G004", # `logging-f-string` : loggingでf-stringを使いたいので無視する
    "PD901", #すでに`df`という変数をいろんなところで使っているため
    "PD002", #すでにpandasで`inplace=True`はいろんなところで使っているため
    "RUF001", # 全角記号など`ambiguous unicode character`も使いたいため
    "RUF002",# 全角記号など`ambiguous unicode character`も使いたいため
    "RUF003",# 全角記号など`ambiguous unicode character`も使いたいため
    "PLC1901", # compare-to-empty-string : `if a == "`のように空文字列で直接比較したいときがあるため
    "PLR2004", # magic-value-comparison: listのサイズで判定するときがよくあるため
    "ANN101", # missing-type-self: 引数selfには型ヒントは付けていないため
    "ANN102", # missing-type-cls: 引数clsには型ヒントは付けていないため
    "ANN002", # missing-type-args
    "ANN003", # missing-type-kwargs
    "ERA", # : 役立つこともあるが、コメントアウトしていないコードも警告されるので無視する
    "ANN201", # missing-return-type-public-function: 
    "ANN202", # missing-return-type-private-function:
    "INP001",
    "E501", # line too long
    "C408", # Unnecessary dict call - rewrite as a literal
    "TD", # flake8-todo
    "FIX", # flake8-fixme
    "PLR",  # pylint Refactor 
    "RSE", # flake8-raise
    "D", # pydocstyle, Docstringを中途半端にしか書いていないので、除外する
    "C90", # mccabe 
    "T20", # flake8-print
    "SLF", #  flake8-self
    "BLE", # flake8-blind-except
    "FBT", # flake8-boolean-trap
    "TRY", # tryceratops 
    "COM", # flake8-commas 
    "S", # flake8-bandit
    "EM",#flake8-errmsg
    "EXE", # flake8-executable
    "ICN", # flake8-import-conventions
    "RET",#flake8-return
    "SIM",#flake8-simplify
    "TCH", # flake8-type-checking
    "PTH", #pathlibを使わないコードが多いので、除外する
    "ISC", #flake8-implicit-str-concat
    "N", # pep8-naming
    "PT", # flake8-pytest-style
    "ANN",
    
]
extend-ignore = [
    
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.ruff.per-file-ignores]
"__init__.py" = ["D104"]
